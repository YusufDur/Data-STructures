/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package LabAssignment;

import javax.swing.DefaultListModel;
import javax.swing.WindowConstants;

/**
 *
 * @author yusuf.dur
 */
public class LabAssignment extends javax.swing.JFrame {

    long time1 = System.nanoTime();
    // run algorithm
    long time2 = System.nanoTime();
    double sortingtime = (double) (time2 - time1) / (1000000.0);

    /**
     * Creates new form LabAssignment
     */
    DefaultListModel model1 = new DefaultListModel();
    DefaultListModel model2 = new DefaultListModel();
    int generatedArray[];

    int lengthArray[] = {10, 100, 1000, 10000, 50000, 100000, 500000};
    double runningTime[]; 

    public LabAssignment() {
        initComponents();
        runningTime = new double[7];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        sortedList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        createdList = new javax.swing.JList<>();
        generateButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lengthText = new javax.swing.JTextField();
        warning = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        bubbleRbtn = new javax.swing.JRadioButton();
        heapRbtn = new javax.swing.JRadioButton();
        insertionRbtn = new javax.swing.JRadioButton();
        quickRbtn = new javax.swing.JRadioButton();
        selectionRbtn = new javax.swing.JRadioButton();
        mergeRbtn = new javax.swing.JRadioButton();
        drawGraphBtn = new javax.swing.JButton();
        refreshBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setBackground(java.awt.Color.red);

        sortedList.setFocusable(false);
        jScrollPane1.setViewportView(sortedList);

        jScrollPane2.setBackground(java.awt.Color.red);

        createdList.setFocusable(false);
        jScrollPane2.setViewportView(createdList);

        generateButton.setBackground(java.awt.Color.red);
        generateButton.setText("Generate Random Array");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        jLabel1.setBackground(java.awt.Color.red);
        jLabel1.setText("Array Length");

        lengthText.setBackground(java.awt.Color.red);

        warning.setBackground(java.awt.Color.red);
        warning.setForeground(new java.awt.Color(255, 0, 0));

        jLabel3.setBackground(java.awt.Color.red);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Sorting Version Of The Array");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lbl.setBackground(java.awt.Color.red);
        lbl.setForeground(new java.awt.Color(255, 51, 51));

        jPanel1.setBackground(new java.awt.Color(51, 255, 255));

        buttonGroup1.add(bubbleRbtn);
        bubbleRbtn.setText("BubbleSort");

        buttonGroup1.add(heapRbtn);
        heapRbtn.setSelected(true);
        heapRbtn.setText("HeapSort");

        buttonGroup1.add(insertionRbtn);
        insertionRbtn.setText("Insertion Sort");

        buttonGroup1.add(quickRbtn);
        quickRbtn.setText("Quick Sort");

        buttonGroup1.add(selectionRbtn);
        selectionRbtn.setText("Selection Sort");

        buttonGroup1.add(mergeRbtn);
        mergeRbtn.setText("Merge Sort");

        drawGraphBtn.setText("Draw Graph");
        drawGraphBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawGraphBtnActionPerformed(evt);
            }
        });

        refreshBtn.setText("Refresh");
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Drawing Graph ");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(drawGraphBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(118, 118, 118)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bubbleRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(insertionRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quickRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selectionRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heapRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mergeRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(heapRbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(bubbleRbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertionRbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectionRbtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quickRbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mergeRbtn)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(drawGraphBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(warning, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lengthText, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lengthText)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(warning, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        // clean createdList and warning label
        warning.setText("");
        model1.removeAllElements();
        createdList.setModel(model1);
        // try catch 
        try {
            // control number length 
            if (Integer.parseInt(lengthText.getText()) > 2000000000) {
                warning.setText("please enter valid input!");
                lengthText.setText("");
            }
            //generate array
            int length = Integer.parseInt(lengthText.getText());
            generatedArray = new int[length];
            for (int i = 0; i < length; i++) {
                generatedArray[i] = (int) ((Math.random() * 1000) + 1);
                model1.addElement(generatedArray[i]);
            }
            createdList.setModel(model1);
            // clean sortedList
            model2.removeAllElements();
            sortedList.setModel(model2);

        } catch (NumberFormatException e) {
            warning.setText("please enter valid input!");
            lengthText.setText("");
        }

        // write sorted array to sortedList and store algorithm running time
        if (heapRbtn.isSelected()) {
            long start = System.currentTimeMillis();
            mergeSort(generatedArray, 0, generatedArray.length - 1);
            double time = ((System.currentTimeMillis() - start) / (200.0));
            System.out.println(time);

        }
        if (bubbleRbtn.isSelected()) {
//            heapSort(generatedArray, generatedArray.length);

        }
        if (insertionRbtn.isSelected()) {
//            heapSort(generatedArray, generatedArray.length);

        }
        if (selectionRbtn.isSelected()) {
//            heapSort(generatedArray, generatedArray.length);

        }
        if (mergeRbtn.isSelected()) {
//            heapSort(generatedArray, generatedArray.length);

        }
        if (quickRbtn.isSelected()) {
//            heapSort(generatedArray, generatedArray.length);

        }

        for (int i = 0; i < generatedArray.length; i++) {
            model2.add(i, generatedArray[i]);
        }
        sortedList.setModel(model2);

    }//GEN-LAST:event_generateButtonActionPerformed

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        dispose();
        LabAssignment f = new LabAssignment();
        f.show();
    }//GEN-LAST:event_refreshBtnActionPerformed

    private void drawGraphBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawGraphBtnActionPerformed
        // settings 
        jLabel4.setText("Loading ...");
        heapRbtn.setEnabled(false);
        bubbleRbtn.setEnabled(false);
        insertionRbtn.setEnabled(false);
        selectionRbtn.setEnabled(false);
        mergeRbtn.setEnabled(false);
        quickRbtn.setEnabled(false);
        //generate array
        for (int i = 0; i < 7; i++) {
            generatedArray = new int[lengthArray[i]];
            for (int j = 0; j < generatedArray.length; j++) {
                generatedArray[j] = (int) ((Math.random() * 1000) + 1);

            }
            // write sorted array to sortedList and store algorithm running time
            if (heapRbtn.isSelected()) {
                long start = System.currentTimeMillis();
                heapSort(generatedArray, generatedArray.length);
                double time = ((System.currentTimeMillis() - start) / (1000.0));
                runningTime[i] = time;
            }
            if (bubbleRbtn.isSelected()) {
                long start = System.currentTimeMillis();
                bubbleSort(generatedArray, generatedArray.length);
                double time = ((System.currentTimeMillis() - start) / (1000.0));
                runningTime[i] = time;
            }
            if (insertionRbtn.isSelected()) {
                long start = System.currentTimeMillis();
                insertionSort(generatedArray, generatedArray.length);
                double time = ((System.currentTimeMillis() - start) / (1000.0));
                runningTime[i] = time;

            }
            if (selectionRbtn.isSelected()) {
                long start = System.currentTimeMillis();
                selectionSort(generatedArray, generatedArray.length);
                double time = ((System.currentTimeMillis() - start) / (1000.0));
                runningTime[i] = time;

            }
            if (mergeRbtn.isSelected()) {
                long start = System.currentTimeMillis();
                mergeSort(generatedArray, 0, generatedArray.length - 1);
                double time = ((System.currentTimeMillis() - start) / (1000.0));
                runningTime[i] = time;
            }
            if (quickRbtn.isSelected()) {
                long start = System.currentTimeMillis();
                quickSort(generatedArray, 0, generatedArray.length - 1);
                double time = ((System.currentTimeMillis() - start) / (1000.0));
                runningTime[i] = time;
            }
        }

        LineChartExample example = new LineChartExample("Line Chart Example", lengthArray, runningTime);
        example.setAlwaysOnTop(true);
        example.pack();
        example.setSize(800, 600);
        example.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        example.setVisible(true);


    }//GEN-LAST:event_drawGraphBtnActionPerformed

    // all sorting algorithms 
    int parent(int index) {
        return (index - 1) / 2;
    }

    void swap(int arr[], int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    void heapify(int arr[], int size) {
        int lastindex = size - 1;
        int parent = parent(lastindex);

        for (int i = parent; i >= 0; i--) {
            minHeap(arr, i, size);
        }
    }

    void minHeap(int arr[], int i, int size) {
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        int min = i;
        if (left < size && arr[left] > (arr[min])) {
            min = left;
        }
        if (right < size && arr[right] > (arr[min])) {
            min = right;
        }
        if (min != i) {
            swap(arr, min, i);
            minHeap(arr, min, size);
        }
    }

    void merge(int array[], int p, int q, int r) {

        int n1 = q - p + 1;
        int n2 = r - q;

        int L[] = new int[n1];
        int M[] = new int[n2];

        // fill the left and right array
        for (int i = 0; i < n1; i++) {
            L[i] = array[p + i];
        }
        for (int j = 0; j < n2; j++) {
            M[j] = array[q + 1 + j];
        }

        // Maintain current index of sub-arrays and main array
        int i, j, k;
        i = 0;
        j = 0;
        k = p;

        // Until we reach either end of either L or M, pick larger among
        // elements L and M and place them in the correct position at A[p..r]
        // for sorting in descending
        // use if(L[i] >= <[j])
        while (i < n1 && j < n2) {
            if (L[i] <= M[j]) {
                array[k] = L[i];
                i++;
            } else {
                array[k] = M[j];
                j++;
            }
            k++;
        }

        // When we run out of elements in either L or M,
        // pick up the remaining elements and put in A[p..r]
        while (i < n1) {
            array[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            array[k] = M[j];
            j++;
            k++;
        }
    }

    void heapSort(int arr[], int size) {
        heapify(arr, size);
        int temp = size;
        for (int i = 0; i < temp - 1; i++) {
            swap(arr, 0, --size);
            minHeap(arr, 0, size);
        }
        size = temp;
    }

    void bubbleSort(int arr[], int size) {
        for (int k = 1; k < size; k++) {
            for (int i = 0; i < size - k; i++) {
                if ((Integer) arr[i] > (Integer) arr[i + 1]) {
                    swap(arr, i, i + 1);
                }
            }
        }
    }

    void selectionSort(int arr[], int size) {
        // Incrementa di 1 il limite inferiore del sub array da ordinare
        for (int i = 0; i < size - 1; i++) {
            // Trova il minimo nel subarray da ordinare
            int indice_min = i;
            for (int j = i + 1; j < size; j++) {
                // Confronto per trovare un nuovo minimo
                if (arr[j] < arr[indice_min]) {
                    indice_min = j; // Salvo l'indice del nuovo minimo
                }
            }
            // Scambia il minimo trovato con il primo elemento
            swap(arr, indice_min, i);
        }
    }

    void insertionSort(int arr[], int size) {
        Integer i, key, j;
        for (i = 1; i < size; i++) {
            key = (Integer) arr[i];
            j = i - 1;
            while (j >= 0 && (Integer) arr[j] > key) {
                arr[j + 1] = arr[j];
                j = j - 1;
            }
            arr[j + 1] = key;
        }
    }

    void mergeSort(int array[], int left, int right) {
        if (left < right) {

            // m is the point where the array is divided into two sub arrays
            int mid = (left + right) / 2;

            // recursive call to each sub arrays
            mergeSort(array, left, mid);
            mergeSort(array, mid + 1, right);

            // Merge the sorted sub arrays
            merge(array, left, mid, right);
        }
    }

    public void quickSort(int arr[], int begin, int end) {
        if (begin < end) {
            int partitionIndex = partition(arr, begin, end);
            quickSort(arr, begin, partitionIndex - 1);
            quickSort(arr, partitionIndex + 1, end);
        }
    }

    private int partition(int arr[], int begin, int end) {
        int pivot = arr[end];
        int i = (begin - 1);

        for (int j = begin; j < end; j++) {
            if (arr[j] <= pivot) {
                i++;

                int swapTemp = arr[i];
                arr[i] = arr[j];
                arr[j] = swapTemp;
            }
        }

        int swapTemp = arr[i + 1];
        arr[i + 1] = arr[end];
        arr[end] = swapTemp;

        return i + 1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LabAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LabAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LabAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LabAssignment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LabAssignment().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton bubbleRbtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JList<String> createdList;
    private javax.swing.JButton drawGraphBtn;
    private javax.swing.JButton generateButton;
    private javax.swing.JRadioButton heapRbtn;
    private javax.swing.JRadioButton insertionRbtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl;
    private javax.swing.JTextField lengthText;
    private javax.swing.JRadioButton mergeRbtn;
    private javax.swing.JRadioButton quickRbtn;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JRadioButton selectionRbtn;
    private javax.swing.JList<String> sortedList;
    private javax.swing.JLabel warning;
    // End of variables declaration//GEN-END:variables
}
